<%- include('top') %>
<!-- <script type="text/javascript">
	// Require login to see this page.
	app.auth.forceLogin()
</script> -->

<script src="/static-modules/ace-builds/src-noconflict/ace.js"></script>

<link rel="stylesheet" href="static-modules/xterm/css/xterm.css" />
<script src="static-modules/xterm/lib/xterm.js"></script>
<script src="static-modules/xterm-addon-fit/lib/xterm-addon-fit.js"></script>
<script src="static-modules/xterm-addon-attach/lib/xterm-addon-attach.js"></script>
<script src="static-modules/xterm-addon-webgl/lib/xterm-addon-webgl.js"></script>

<script src="static/js/clterminal.js"></script>

<style type="text/css">

	.actionMessage{
		position: absolute;
		z-index: 10000000;
		width: 100%;
	}

	dev.card-body {
		padding: 0 !important;
	}

	.codeland-col {
		padding-bottom: 1em;
	}

	#codeland-card {
		height: 100%;

	}

	#editor {
		height: 100%;
		margin: 0;
		top: 50px;
		top: 0;
		left: 0;
	}

	div.codeland-GUI{
		background-color: black;
		height: 100%;
		bottom: 0;
	}

	#codeland-tty, #codeland-results{
		padding-top: .5px;
		padding-left: .5em;
	}
</style>

<script type="text/javascript">
var editor;
var currentLanguage = 'sh';
var termTTY;
var resultsTerm;
var codelandGUIonResult = false;

/*
	Parse the code from into what the runners wants
*/
const interpreters = {
	'sh': 'echo "${code_in_base64}" | base64 --decode | bash',
	'python': 'echo "${code_in_base64}" | base64 --decode | python3',
	'javascript': 'echo "${code_in_base64}" | base64 --decode | node',
	'c_ccp': 'echo "${code_in_base64}" | base64 --decode | gcc -xc -o run1 - && ./run1',
	'php': "echo \"${code_in_base64}\" | base64 --decode | php",
	"powershell": "echo \"${code_in_base64}\" | base64 --decode | pwsh -NonInteractive",
	"lua": "echo \"${code_in_base64}\" | base64 --decode | lua",
	"markdown": "echo \"${code_in_base64}\" | base64 --decode | pandoc -f markdown -t html",
	"rust": "echo \"${code_in_base64}\" | base64 --decode | rustc -o run1 - && ./run1",
	"perl": "echo \"${code_in_base64}\" | base64 --decode | perl",
	"brainfuck": "echo \"${code_in_base64}\" | base64 --decode > /tmp/br.run; bf /tmp/br.run",

	"golang": "echo \"${code_in_base64}\" | base64 --decode > /tmp/run.go; go run /tmp/run.go",
}

function parseCode(code, language){
	return interpreters[language].replace('${code_in_base64}', btoa(code))
}

/*	
	Map the arguments from the URL hash to what functions will edit the
	correct part of the page
*/

function updateURL(key, value){
	let hash = new URLSearchParams(window.location.hash.replace(/^\#/, ''));
	hash.set(key, value);

	window.location.hash = hash.toString();
}

const urlMap = {
	language: updateLanguage,
	keyboard: updateKeybpard,
	code: updateCode
};

function parseHash(){
	for (const [key, value] of new URLSearchParams(window.location.hash.replace(/^\#/, ''))) {
		if(urlMap[key]) urlMap[key](value, false)
	}
}

/*
	Helper functions to update the DOM. Functions will be called via event, 
	or other helper functions
*/

// Helper function to update drop down menus
function updateDropDown(value, $elelemt){
	let text;
	$elelemt.find('a.dropdown-item').each(function(index){
		let $this = $(this)
		if($this.attr('value') === value){
			$this.addClass('active');
			text = $this.html()
		}else{
			$this.removeClass('active')
		}
	});

	$($elelemt.find('button.dropdown-toggle')[0]).html(text)

	return !!text;
}

function updateKeybpard(keyboard, appendURL=true){
	if(updateDropDown(keyboard, $codelandKeyboardSelect)){
	console.log('here')
		editor.setKeyboardHandler(`ace/keyboard/${keyboard}`);
		if(appendURL) updateURL('keyboard', keyboard);
	}
}

function updateLanguage(language, appendURL=true){
	if(updateDropDown(language, $codelandLanguageSelect)){
		editor.getSession().setMode(`ace/mode/${language}`);
		currentLanguage = language;
		if(appendURL) updateURL('language', language);
	}
}

function updateCode(code, appendURL){
	code = atob(code)
	editor.setValue(code)
}

// Used by the share button to set the URL hash
function setCode(code){
	code = btoa(code)
	updateURL('language', currentLanguage)
	updateURL('code', code)
}

function buildAce(elelemt){
	editor = ace.edit(elelemt);
	// ace.require('ace/ext/settings_menu').init(editor);
	ace.require("ace/ext/language_tools");
	// editor.$blockScrolling = Infinity;
	editor.setFontSize(16);
	editor.setTheme("ace/theme/monokai");
	editor.getSession().setMode("ace/mode/sh");
	editor.setKeyboardHandler("ace/keyboard/sublime");
	editor.setShowInvisibles(true);
	editor.setOptions({
		enableBasicAutocompletion: true,
		enableSnippets: true,
		enableLiveAutocompletion: true
	});

	return editor;
}

$(document).ready(function(){
	/*
		Cache common DOM elements
	*/
	$editor = $('#editor')
	$editorSettings = $('.clodelandSettings');
	$spinner = $('#workerStatus');
	$results = $('#codeland-results');
	$codelandKeyboardSelect = $('#codelandKeyboardSelect');
	$codelandLanguageSelect = $('#codelandLanguageSelect');

	/*
		Create instances that need the DOM ready
	*/
	app.codeland.persistentRun('ttyd -W bash > ~/.TTYD 2>&1 & echo "done"', (err, data)=>{
		if(err){
			let message = (data && data.message) || err.message || err;
			return app.util.actionMessage(
				`Failed with: <b>${message}</b><br/> Refreshing may clear the error...`,
				$('#codeland-tty'),
				'danger',
			);
		}
		termTTY = new CLTerminalWs(document.getElementById('codeland-tty'), `wss://7681.${app.codeland.getRunner().domain}/ws`)
	});
	
	resultsTerm = new CLTerminal(document.getElementById('codeland-results'));
	editor = buildAce($editor[0]);

	parseHash();

	/*
		Set up event handlers
	*/
	$('#share').on('click', function(){
		setCode(editor.getValue());
	});

	$('#execute').on('click', function(){
		resultsTerm.clear()
		$('.results-buttons').find('button').each(function(){
			$(this).addClass('disabled')
		})
		$editorSettings.hide()
		$spinner.show()
		app.util.actionMessage(`
			Executing...
			<div class="spinner-border float-right" role="status">
				<span class="sr-only">Loading...</span>
			</div>
		`, $('#codeland-results'), 'warning')
		
		app.codeland.persistentRun(`export TERM=xterm-256color; ${parseCode(editor.getValue(), currentLanguage)}`, (err, data)=>{
			$editorSettings.show()
			$spinner.hide()
			
			if(err){
				console.log(err, data)
				let message = (data && data.message) || err.message || err;
				app.util.actionMessage(`Runner failed with error: <b>${message}</b>`, $('#codeland-results'), 'danger')
				return;
			}
			app.util.actionMessage('', $('#codeland-results'))

			for(let line of data.res.split('\n')){
				resultsTerm.writeln(line)
			}

			if(!codelandGUIonResult) $('#codeland-GUI-resrilt-spiner').show()

			$.scope.runInformation.update(data)
			$('.results-buttons').find('button').each(function(){
				$(this).removeClass('disabled')
			})

		})
	});

	$codelandKeyboardSelect.on('click', 'a.dropdown-item', function(event){
		updateKeybpard($(this).attr('value'))
	});

	$codelandLanguageSelect.on('click', 'a.dropdown-item', function(event){
		updateLanguage($(this).attr('value'))
	});

	$('#runnerInfo').on('click', function(event){
		app.codeland.info(function(err, data){
			if(err) return console.log('info error', err, data)
			$.scope.runInformation.update({runner: name, ...data});
		});
	})



	$('button.codeland-GUI').on('click', function(event){
		codelandGUIonResult = !codelandGUIonResult
		$('.codeland-GUI').toggle();
			termTTY.fit()
			resultsTerm.fit()
	});

	/*
		pre-load the runner info info with spinners until its clicked on
	*/

	let loadingHTML = `
	<div class="spinner-border text-warning spinner-border-sm" role="status">
		<span class="sr-only">Loading...</span>
	</div>
	Loading...
	`
	$.scope.runInformation.update({
		runner: loadingHTML,
		duration: loadingHTML,
		domain: loadingHTML,
		ip: loadingHTML,
		rx: loadingHTML,
		tx: loadingHTML,
		total: loadingHTML,
		link: loadingHTML,
		kmem: loadingHTML,
		memory: loadingHTML,
	});

});
</script>
<div class="row" style="height: 100%; display: none;">
	<div class="codeland-col col-md-6" style="height: 100%;">
		<div id="codeland-card" class="card shadow-lg">
			<nav class="card-header navbar navbar-dark bg-dark">
				<a class="navbar-brand">
					<i class="fa-solid fa-code"></i>
					Editor
				</a>
				<div class="d-inline">
					<div id="workerStatus" class="spinner-grow spinner-grow-sm text-success" role="status" style="display:none">
						<span class="sr-only">Loading...</span>
					</div>

						<button id="share" class="btn btn-outline-success btn-sm clodelandSettings">
							<i class="fa-solid fa-share-from-square"></i>
							Share
						</button>

						<div id="codelandKeyboardSelect" class="btn-group clodelandSettings">
							<button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
								<img src="/static/svg/sublime-text.svg" height="16px" /> Sublime
							</button>
							<div class="dropdown-menu">
								<a class="dropdown-item active" value="sublime"><img src="/static/svg/sublime-text.svg" height="16px" /> Sublime</a>
								<a class="dropdown-item" value="vscode"><img src="/static/svg/vscode.svg" height="16px" /> VS Code</a>
							</div>
						</div>

						<div id="codelandLanguageSelect" class="btn-group clodelandSettings">
							<button class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
								<img src="/static/svg/bash.svg" height="16px" /></i> Bash
							</button>
							<div class="dropdown-menu">
								<a class="dropdown-item active" value="sh"><img src="/static/svg/bash.svg" height="16px" /></i> Bash</a>
								<a class="dropdown-item" value="powershell"><img src="/static/svg/PowerShell.svg" height="16px" /></i> PowerShell</a>
								<a class="dropdown-item" value="perl"><img src="/static/svg/lua.svg" height="16px" /> Perl</a>
								<a class="dropdown-item" value="php"><img src="/static/svg/php.svg" height="16px" /></i> php</a>
								<a class="dropdown-item" value="javascript"><i class="fa-brands fa-node-js"></i> JavaScript</a>
								<a class="dropdown-item" value="python"><i class="fa-brands fa-python"></i> Python</a>
								<a class="dropdown-item" value="c_cpp"><i class="fa-solid fa-c"></i> c/c++</a>
								<a class="dropdown-item" value="rust"><i class="fa-brands fa-rust"></i> Rust</a>
								<a class="dropdown-item" value="lua"><img src="/static/svg/lua.svg" height="16px" /></i> Lua</a>
								<a class="dropdown-item" value="golang"><img src="/static/svg/go.svg" height="16px" /></i> Go</a>
								<a class="dropdown-item" value="markdown"><i class="fa-brands fa-markdown"></i> Markdown</a>
								<a class="dropdown-item" value="brainfuck"><i class="fa-solid fa-brain"></i> Brianfuck</a>
							</div>
						</div>

					<button id="execute" class="btn btn-outline-success btn-sm clodelandSettings">
						<i class="fa-solid fa-play"></i>
						Run!
					</button>
				</div>
				
			</nav>

			<div class="card-header actionMessage" style="display: none;"></div>
			<div class="card-body" style="padding: 0">
				<div id="editor"></div>
			</div>
		
		</div>
	</div>

	<div class="codeland-col col-md-6" style="height: 100%;">
		<div id="codeland-card" class="card shadow-lg">

				<nav class="card-header navbar navbar-dark bg-dark">
					<a id="tile-terminal" class="navbar-brand codeland-GUI">
						<i class="fa-solid fa-terminal"></i>
						Terminal
						<button class="btn btn-outline-success btn-sm codeland-GUI" onclick="$('#codeland-GUI-resrilt-spiner').hide()">
							<i class="fa-solid fa-retweet"></i>
							<div id="codeland-GUI-resrilt-spiner" class="spinner-grow text-warning" role="status" style="display: none; position: absolute;">
							  <span class="sr-only">Loading...</span>
							</div>
								Results
						</button>

					</a>
					<a id="tile-result" class="navbar-brand codeland-GUI" style="display: none;">
						<i class="fa-solid fa-outdent"></i>
						Results
						<button class="btn btn-outline-success btn-sm codeland-GUI" style="display: none;">
							<i class="fa-solid fa-retweet"></i>
								Terminal
						</button>
					</a>


					<div class=" dropdown dropleft results-buttons d-inline">
						<button id="runnerInfo" class="btn btn-outline-light btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
							<i class="fa-solid fa-circle-info"></i>
						</button>
						<div class="dropdown-menu">
							<ul class="list-group list-group-flush" jq-repeat="runInformation">
								<li class="list-group-item py-1">
									Runner: <b>{{{runner}}}</b>
								</li>
								<li class="list-group-item py-1">
									Duration: <b>{{{duration}}}</b><i>ms</i>
								</li>
								<li class="list-group-item py-1">
									domain: <b>{{{domain}}}</b>
								</li>
								<li class="list-group-item py-1">
									ip: <b>{{{ip}}}</b>
								</li>
								<li class="list-group-item py-1">
									rx: <b>{{{rx}}}</b>
								</li>
								<li class="list-group-item py-1">
									tx: <b>{{{tx}}}</b>
								</li>
								<li class="list-group-item py-1">
									total: <b>{{{total}}}</b>
								</li>
								<li class="list-group-item py-1">
									link: <b>{{{link}}}</b>
								</li>
								<li class="list-group-item py-1">
									kmem: <b>{{{kmem}}}</b>
								</li>
								<li class="list-group-item py-1">
									memory: <b>{{{memory}}}</b>
								</li>
							</ul>
						</div>
						<button id="clear" class="disabled btn btn-outline-success btn-sm">
							<i class="fa-solid fa-eraser"></i>
							Clear
						</button>

					</div>
					
				</nav>

			<div class="card-body" style="padding: 0">
			<div class="card-header actionMessage" style="display: none;"></div>

				<div id="codeland-results" class="codeland-GUI" style="display:none"></div>
				<div id="codeland-tty" class="codeland-GUI"></div>

			</div>
		
		</div>
	</div>
</div>
<%- include('bottom') %>

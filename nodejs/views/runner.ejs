<%- include('top') %>

<!-- <script src="/static/lib/js/hterm_all.js"></script> -->
<script src="/static-modules/ace-builds/src-noconflict/ace.js"></script>

<link rel="stylesheet" href="static-modules/xterm/css/xterm.css" />
<script src="static-modules/xterm/lib/xterm.js"></script>
<script src="static-modules/xterm-addon-fit/lib/xterm-addon-fit.js"></script>
<script src="static-modules/xterm-addon-attach/lib/xterm-addon-attach.js"></script>

<style type="text/css">

	dev.card-body {
		padding: 0 !important;
	}

	#codeland-col {
/*		padding-bottom: 1em;*/
	}

	#codeland-card {
		height: 100%;

	}

	#editor {
/*		background-color: blue;*/
		height: 100%;
	    margin: 0;
	    top: 50px;
	    top: 0;
	    left: 0;
/*	    width: 50%;
	    display: inline-block;*/
	}

	#codeland-results {
		background-color: darkgrey;
		height: 100%;
	    margin-bottom: 0;
/*	    top: 50px;
	    top: 0;
	    right: 0;*/
/*	    width: 50%;
	    float: right;
	    display: inline-block;*/
/*	    overflow: scroll;*/*/
	}




</style>

<script type="text/javascript">
	const interpreters = {
	    'sh': 'echo "${}" | base64 --decode | bash',
	    'python': 'echo "${}" | base64 --decode | python3',
	    'javascript': 'echo "${}" | base64 --decode | node',
	    'c_ccp': 'echo "${}" | base64 --decode | gcc -xc -o run1 - && ./run1',
	}

	function parseCode(code, language){
		return interpreters[language].replace('${}', btoa(code))
	}

	var editor;
	var currentLanguage = 'sh';

	$(document).ready(function(){

		editor = ace.edit($('#editor')[0]);
		// ace.require('ace/ext/settings_menu').init(editor);
		ace.require("ace/ext/language_tools");
		// editor.$blockScrolling = Infinity;
		editor.setFontSize(16);
		editor.setTheme("ace/theme/monokai");
		editor.getSession().setMode("ace/mode/sh");
		editor.setKeyboardHandler("ace/keyboard/sublime");

		editor.setShowInvisibles(true);

		// editor.setOptions({
		//     enableBasicAutocompletion: true,
		//     enableSnippets: true,
		//     enableLiveAutocompletion: true
		// });

		// editor.commands.addCommands([
		//     {
		//         name: "showSettingsMenu",
		//         bindKey: {
		//             win: "Ctrl-q",
		//             mac: "Ctrl-q"
		//         },
		//         exec: function (editor) {
		//             editor.showSettingsMenu();
		//         },
		//         readOnly: true
		//     }
		// ]);


		term = new Terminal();
		const fitAddon = new FitAddon.FitAddon()
		term.loadAddon( fitAddon );
		term.open(document.getElementById('codeland-results'));
		fitAddon.fit()

		$(window).resize(function(){
		  fitAddon.fit()
		});

		$runForm = $('#clodelandRun');
		$spinner = $('#workerStatus');
		$results = $('#codeland-results');
		$codelandKeyboardSelect = $('#codelandKeyboardSelect');
		$codelandLanguageSelect = $('#codelandLanguageSelect');

		function updateDropDown(value, $elelemt){
			let text;
			$elelemt.find('a.dropdown-item').each(function(index){
				let $this = $(this)
				if($this.attr('value') === value){
					$this.addClass('active');
					text = $this.html()
				}else{
					$this.removeClass('active')
				}
			});

			$($elelemt.find('button.dropdown-toggle')[0]).html(text)

			return !!text;
		}

		function updateURL(key, value){
			let hash = new URLSearchParams(window.location.hash.replace(/^\#/, ''));
			hash.set(key, value);

			window.location.hash = hash.toString();
		}

		const urlMap = {
			language: updateLanguage,
			keyboard: updateKeybpard,
		};

		function parseHash(){
			for (const [key, value] of new URLSearchParams(window.location.hash.replace(/^\#/, ''))) {
				if(urlMap[key]) urlMap[key](value, false)
			}
		}

		parseHash();

		function updateKeybpard(keyboard, appendURL=true){
			if(updateDropDown(keyboard, $codelandKeyboardSelect)){
			console.log('here')
				editor.setKeyboardHandler(`ace/keyboard/${keyboard}`);
				if(appendURL) updateURL('keyboard', keyboard);
			}
		}

		function updateLanguage(language, appendURL=true){
			if(updateDropDown(language, $codelandLanguageSelect)){
				editor.getSession().setMode(`ace/mode/${language}`);
				currentLanguage = language;
				if(appendURL) updateURL('language', language);
			}
		}

		$runForm.find('#execute').on('click', function(){
			$runForm.hide()
			$spinner.show()

			app.codeland.once(`export TERM=xterm-256color; ${parseCode(editor.getValue(), currentLanguage)}`, (err, data)=>{
				if(err){
					alert("ERROR!")
					console.log('err', err)
				}

				$runForm.show()
				$spinner.hide()
				term.clear()

				for(let line of data.res.split('\n')){
					term.writeln(line)
				}

			})
		});

		$codelandKeyboardSelect.on('click', 'a.dropdown-item', function(event){
			updateKeybpard($(this).attr('value'))
		});

		$codelandLanguageSelect.on('click', 'a.dropdown-item', function(event){
			updateLanguage($(this).attr('value'))
		});

	});
</script>
<div class="row" style="height: 100%">
	<div id="codeland-col" class="col-md-6" style="height: 100%;">
		<div id="codeland-card" class="card shadow-lg">
			<div class="card-header">
				<span class="float-right">
					
					<div id="workerStatus" class="spinner-grow spinner-grow-sm text-success" role="status" style="display:none">
						<span class="sr-only">Loading...</span>
					</div>
					<div id="clodelandRun">
						<div class="form-row align-items-center">
							<div class="col-auto my-1">

								<div id="codelandKeyboardSelect" class="btn-group">
									<button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
										<img src="/static/svg/sublime-text.svg" height="16px" /> Sublime
									</button>
									<div class="dropdown-menu">
										<a class="dropdown-item active" value="sublime"><img src="/static/svg/sublime-text.svg" height="16px" /> Sublime</a>
										<a class="dropdown-item" value="vscode"><img src="/static/svg/vscode.svg" height="16px" /> VS Code</a>
									</div>
								</div>


								<div id="codelandLanguageSelect" class="btn-group">
									<button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
										<i class="fa-solid fa-hashtag"></i> Bash
									</button>
									<div class="dropdown-menu">
										<a class="dropdown-item active" value="sh"><i class="fa-solid fa-hashtag"></i> Bash</a>
										<a class="dropdown-item" value="javascript"><i class="fa-brands fa-node-js"></i> JavaScript</a>
										<a class="dropdown-item" value="python"><i class="fa-brands fa-python"></i> Python</a>
										<a class="dropdown-item" value="c_cpp"><i class="fa-solid fa-c"></i> c/c++</a>
									</div>
								</div>

							</div>
							<div class="col-auto my-1">
								<!-- <button>
									<i class="fa-solid fa-gear"></i>
									Settings
								</button> -->
								<button id="execute">
									<i class="fa-solid fa-play"></i>
									Run!
								</button>
							</div>
						</div>
					</div>
				</span>
				<i class="fa-solid fa-code"></i>
				Editor

			</div>
			<div class="card-header actionMessage" style="display: none;"></div>
			<div class="card-body" style="padding: 0">

				<div id="editor"></div>


			</div>
		
		</div>
	</div>

	<div id="codeland-col" class="col-md-6" style="height: 100%;">
		<div id="codeland-card" class="card shadow-lg">
			<div class="card-header">
				<i class="fa-solid fa-terminal"></i>
				Results
			</div>
			<div class="card-header actionMessage" style="display: none;"></div>
			<div class="card-body" style="padding: 0">


				<div id="codeland-results">
				</div>

			</div>
		
		</div>
	</div>
</div>
<%- include('bottom') %>
